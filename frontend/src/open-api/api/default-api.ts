/* tslint:disable */
/* eslint-disable */
/**
 * LogisTech
 * API for LogisTech
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { CartDTO } from '../models';
// @ts-ignore
import { CommerceProductDTO } from '../models';
// @ts-ignore
import { CreateManyProductItemsDTO } from '../models';
// @ts-ignore
import { CreateOrderItemDTO } from '../models';
// @ts-ignore
import { CreateProductDTO } from '../models';
// @ts-ignore
import { CreateProductItemDTO } from '../models';
// @ts-ignore
import { LoginResponseDTO } from '../models';
// @ts-ignore
import { LoginUserDTO } from '../models';
// @ts-ignore
import { LogoutUserDTO } from '../models';
// @ts-ignore
import { OrderDTO } from '../models';
// @ts-ignore
import { ProductDTO } from '../models';
// @ts-ignore
import { ProductItemDTO } from '../models';
// @ts-ignore
import { RegisterUserDTO } from '../models';
// @ts-ignore
import { TokensDTO } from '../models';
// @ts-ignore
import { TransactionDTO } from '../models';
// @ts-ignore
import { UpdateOrderStatusDTO } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCart: async (
      companyId: string,
      createOrderItemDTO: CreateOrderItemDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists('addItemToCart', 'companyId', companyId);
      // verify required parameter 'createOrderItemDTO' is not null or undefined
      assertParamExists(
        'addItemToCart',
        'createOrderItemDTO',
        createOrderItemDTO
      );
      const localVarPath = `/api/v1/cart/company/{companyId}`.replace(
        `{${'companyId'}}`,
        encodeURIComponent(String(companyId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createOrderItemDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizationTest: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/authorization-test`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} productId
     * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyProductItems: async (
      productId: string,
      createManyProductItemsDTO: CreateManyProductItemsDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists('createManyProductItems', 'productId', productId);
      // verify required parameter 'createManyProductItemsDTO' is not null or undefined
      assertParamExists(
        'createManyProductItems',
        'createManyProductItemsDTO',
        createManyProductItemsDTO
      );
      const localVarPath =
        `/api/v1/product/{productId}/product-item/many`.replace(
          `{${'productId'}}`,
          encodeURIComponent(String(productId))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createManyProductItemsDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} companyId
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrders: async (
      companyId: string,
      cartDTO: CartDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists('createOrders', 'companyId', companyId);
      // verify required parameter 'cartDTO' is not null or undefined
      assertParamExists('createOrders', 'cartDTO', cartDTO);
      const localVarPath = `/api/v1/order/company/{companyId}`.replace(
        `{${'companyId'}}`,
        encodeURIComponent(String(companyId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cartDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} companyId
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct: async (
      companyId: string,
      createProductDTO: CreateProductDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists('createProduct', 'companyId', companyId);
      // verify required parameter 'createProductDTO' is not null or undefined
      assertParamExists('createProduct', 'createProductDTO', createProductDTO);
      const localVarPath = `/api/v1/product/company/{companyId}`.replace(
        `{${'companyId'}}`,
        encodeURIComponent(String(companyId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProductDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} productId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductItem: async (
      productId: string,
      createProductItemDTO: CreateProductItemDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists('createProductItem', 'productId', productId);
      // verify required parameter 'createProductItemDTO' is not null or undefined
      assertParamExists(
        'createProductItem',
        'createProductItemDTO',
        createProductItemDTO
      );
      const localVarPath = `/api/v1/product/{productId}/product-item`.replace(
        `{${'productId'}}`,
        encodeURIComponent(String(productId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProductItemDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderItem: async (
      orderItemId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderItemId' is not null or undefined
      assertParamExists('deleteOrderItem', 'orderItemId', orderItemId);
      const localVarPath = `/api/v1/order-item/{orderItemId}`.replace(
        `{${'orderItemId'}}`,
        encodeURIComponent(String(orderItemId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteProduct', 'id', id);
      const localVarPath = `/api/v1/product/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} productId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductItem: async (
      productId: string,
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists('deleteProductItem', 'productId', productId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteProductItem', 'id', id);
      const localVarPath = `/api/v1/product/{productId}/product-item/{id}`
        .replace(`{${'productId'}}`, encodeURIComponent(String(productId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} orderItemId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editOrderItem: async (
      orderItemId: string,
      createOrderItemDTO: CreateOrderItemDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderItemId' is not null or undefined
      assertParamExists('editOrderItem', 'orderItemId', orderItemId);
      // verify required parameter 'createOrderItemDTO' is not null or undefined
      assertParamExists(
        'editOrderItem',
        'createOrderItemDTO',
        createOrderItemDTO
      );
      const localVarPath = `/api/v1/order-item/{orderItemId}`.replace(
        `{${'orderItemId'}}`,
        encodeURIComponent(String(orderItemId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createOrderItemDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProduct: async (
      id: string,
      createProductDTO: CreateProductDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('editProduct', 'id', id);
      // verify required parameter 'createProductDTO' is not null or undefined
      assertParamExists('editProduct', 'createProductDTO', createProductDTO);
      const localVarPath = `/api/v1/product/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProductDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} productId
     * @param {string} id
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProductItem: async (
      productId: string,
      id: string,
      createProductItemDTO: CreateProductItemDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists('editProductItem', 'productId', productId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('editProductItem', 'id', id);
      // verify required parameter 'createProductItemDTO' is not null or undefined
      assertParamExists(
        'editProductItem',
        'createProductItemDTO',
        createProductItemDTO
      );
      const localVarPath = `/api/v1/product/{productId}/product-item/{id}`
        .replace(`{${'productId'}}`, encodeURIComponent(String(productId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProductItemDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCart: async (
      companyId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists('getCart', 'companyId', companyId);
      const localVarPath = `/api/v1/cart/company/{companyId}`.replace(
        `{${'companyId'}}`,
        encodeURIComponent(String(companyId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CommerceProductDTO} commerceProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommerceProducts: async (
      commerceProductDTO: CommerceProductDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'commerceProductDTO' is not null or undefined
      assertParamExists(
        'getCommerceProducts',
        'commerceProductDTO',
        commerceProductDTO
      );
      const localVarPath = `/api/v1/product/commerce`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commerceProductDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingOrders: async (
      companyId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists('getIncomingOrders', 'companyId', companyId);
      const localVarPath = `/api/v1/order/company/{companyId}/incoming`.replace(
        `{${'companyId'}}`,
        encodeURIComponent(String(companyId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingTransactionsForCompany: async (
      companyId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists(
        'getIncomingTransactionsForCompany',
        'companyId',
        companyId
      );
      const localVarPath = `/api/v1/transaction/incoming/{companyId}`.replace(
        `{${'companyId'}}`,
        encodeURIComponent(String(companyId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById: async (
      orderId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists('getOrderById', 'orderId', orderId);
      const localVarPath = `/api/v1/order/{orderId}`.replace(
        `{${'orderId'}}`,
        encodeURIComponent(String(orderId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingOrders: async (
      companyId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists('getOutgoingOrders', 'companyId', companyId);
      const localVarPath = `/api/v1/order/company/{companyId}/outgoing`.replace(
        `{${'companyId'}}`,
        encodeURIComponent(String(companyId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingTransactionsForCompany: async (
      companyId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists(
        'getOutgoingTransactionsForCompany',
        'companyId',
        companyId
      );
      const localVarPath = `/api/v1/transaction/outgoing/{companyId}`.replace(
        `{${'companyId'}}`,
        encodeURIComponent(String(companyId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItems: async (
      productId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists('getProductItems', 'productId', productId);
      const localVarPath = `/api/v1/product/{productId}/product-item`.replace(
        `{${'productId'}}`,
        encodeURIComponent(String(productId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsForCompany: async (
      companyId: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyId' is not null or undefined
      assertParamExists('getProductsForCompany', 'companyId', companyId);
      const localVarPath = `/api/v1/product/company/{companyId}`.replace(
        `{${'companyId'}}`,
        encodeURIComponent(String(companyId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logIn: async (
      loginUserDTO: LoginUserDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginUserDTO' is not null or undefined
      assertParamExists('logIn', 'loginUserDTO', loginUserDTO);
      const localVarPath = `/api/v1/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginUserDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LogoutUserDTO} logoutUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logOut: async (
      logoutUserDTO: LogoutUserDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'logoutUserDTO' is not null or undefined
      assertParamExists('logOut', 'logoutUserDTO', logoutUserDTO);
      const localVarPath = `/api/v1/auth/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        logoutUserDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {TokensDTO} tokensDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refresh: async (
      tokensDTO: TokensDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tokensDTO' is not null or undefined
      assertParamExists('refresh', 'tokensDTO', tokensDTO);
      const localVarPath = `/api/v1/auth/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tokensDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: async (
      registerUserDTO: RegisterUserDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'registerUserDTO' is not null or undefined
      assertParamExists('register', 'registerUserDTO', registerUserDTO);
      const localVarPath = `/api/v1/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerUserDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderStatus: async (
      orderId: string,
      updateOrderStatusDTO: UpdateOrderStatusDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists('updateOrderStatus', 'orderId', orderId);
      // verify required parameter 'updateOrderStatusDTO' is not null or undefined
      assertParamExists(
        'updateOrderStatus',
        'updateOrderStatusDTO',
        updateOrderStatusDTO
      );
      const localVarPath = `/api/v1/order/{orderId}`.replace(
        `{${'orderId'}}`,
        encodeURIComponent(String(orderId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateOrderStatusDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addItemToCart(
      companyId: string,
      createOrderItemDTO: CreateOrderItemDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addItemToCart(
        companyId,
        createOrderItemDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authorizationTest(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authorizationTest(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} productId
     * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createManyProductItems(
      productId: string,
      createManyProductItemsDTO: CreateManyProductItemsDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createManyProductItems(
          productId,
          createManyProductItemsDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} companyId
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrders(
      companyId: string,
      cartDTO: CartDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrders(
        companyId,
        cartDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} companyId
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProduct(
      companyId: string,
      createProductDTO: CreateProductDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(
        companyId,
        createProductDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} productId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProductItem(
      productId: string,
      createProductItemDTO: CreateProductItemDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductItemDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createProductItem(
          productId,
          createProductItemDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrderItem(
      orderItemId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrderItem(
        orderItemId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProduct(
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} productId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProductItem(
      productId: string,
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteProductItem(
          productId,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} orderItemId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editOrderItem(
      orderItemId: string,
      createOrderItemDTO: CreateOrderItemDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editOrderItem(
        orderItemId,
        createOrderItemDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} id
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editProduct(
      id: string,
      createProductDTO: CreateProductDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editProduct(
        id,
        createProductDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} productId
     * @param {string} id
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editProductItem(
      productId: string,
      id: string,
      createProductItemDTO: CreateProductItemDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editProductItem(
        productId,
        id,
        createProductItemDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCart(
      companyId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCart(
        companyId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {CommerceProductDTO} commerceProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommerceProducts(
      commerceProductDTO: CommerceProductDTO,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ProductDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCommerceProducts(
          commerceProductDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHello(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getHello(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIncomingOrders(
      companyId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OrderDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getIncomingOrders(companyId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIncomingTransactionsForCompany(
      companyId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<TransactionDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getIncomingTransactionsForCompany(
          companyId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrderById(
      orderId: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderById(
        orderId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOutgoingOrders(
      companyId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<OrderDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOutgoingOrders(companyId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOutgoingTransactionsForCompany(
      companyId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<TransactionDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOutgoingTransactionsForCompany(
          companyId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProductItems(
      productId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ProductItemDTO>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProductItems(
        productId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProductsForCompany(
      companyId: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ProductDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProductsForCompany(
          companyId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logIn(
      loginUserDTO: LoginUserDTO,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LoginResponseDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logIn(
        loginUserDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {LogoutUserDTO} logoutUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logOut(
      logoutUserDTO: LogoutUserDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logOut(
        logoutUserDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {TokensDTO} tokensDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async refresh(
      tokensDTO: TokensDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(
        tokensDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async register(
      registerUserDTO: RegisterUserDTO,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LoginResponseDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.register(
        registerUserDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrderStatus(
      orderId: string,
      updateOrderStatusDTO: UpdateOrderStatusDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateOrderStatus(
          orderId,
          updateOrderStatusDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCart(
      companyId: string,
      createOrderItemDTO: CreateOrderItemDTO,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .addItemToCart(companyId, createOrderItemDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizationTest(options?: any): AxiosPromise<string> {
      return localVarFp
        .authorizationTest(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} productId
     * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyProductItems(
      productId: string,
      createManyProductItemsDTO: CreateManyProductItemsDTO,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .createManyProductItems(productId, createManyProductItemsDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} companyId
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrders(
      companyId: string,
      cartDTO: CartDTO,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .createOrders(companyId, cartDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} companyId
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(
      companyId: string,
      createProductDTO: CreateProductDTO,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .createProduct(companyId, createProductDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} productId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductItem(
      productId: string,
      createProductItemDTO: CreateProductItemDTO,
      options?: any
    ): AxiosPromise<ProductItemDTO> {
      return localVarFp
        .createProductItem(productId, createProductItemDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderItem(orderItemId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteOrderItem(orderItemId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .deleteProduct(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} productId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductItem(
      productId: string,
      id: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteProductItem(productId, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} orderItemId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editOrderItem(
      orderItemId: string,
      createOrderItemDTO: CreateOrderItemDTO,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .editOrderItem(orderItemId, createOrderItemDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProduct(
      id: string,
      createProductDTO: CreateProductDTO,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .editProduct(id, createProductDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} productId
     * @param {string} id
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProductItem(
      productId: string,
      id: string,
      createProductItemDTO: CreateProductItemDTO,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .editProductItem(productId, id, createProductItemDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCart(companyId: string, options?: any): AxiosPromise<CartDTO> {
      return localVarFp
        .getCart(companyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CommerceProductDTO} commerceProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommerceProducts(
      commerceProductDTO: CommerceProductDTO,
      options?: any
    ): AxiosPromise<Array<ProductDTO>> {
      return localVarFp
        .getCommerceProducts(commerceProductDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello(options?: any): AxiosPromise<string> {
      return localVarFp
        .getHello(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingOrders(
      companyId: string,
      options?: any
    ): AxiosPromise<Array<OrderDTO>> {
      return localVarFp
        .getIncomingOrders(companyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingTransactionsForCompany(
      companyId: string,
      options?: any
    ): AxiosPromise<Array<TransactionDTO>> {
      return localVarFp
        .getIncomingTransactionsForCompany(companyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById(orderId: string, options?: any): AxiosPromise<OrderDTO> {
      return localVarFp
        .getOrderById(orderId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingOrders(
      companyId: string,
      options?: any
    ): AxiosPromise<Array<OrderDTO>> {
      return localVarFp
        .getOutgoingOrders(companyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingTransactionsForCompany(
      companyId: string,
      options?: any
    ): AxiosPromise<Array<TransactionDTO>> {
      return localVarFp
        .getOutgoingTransactionsForCompany(companyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItems(
      productId: string,
      options?: any
    ): AxiosPromise<Array<ProductItemDTO>> {
      return localVarFp
        .getProductItems(productId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsForCompany(
      companyId: string,
      options?: any
    ): AxiosPromise<Array<ProductDTO>> {
      return localVarFp
        .getProductsForCompany(companyId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logIn(
      loginUserDTO: LoginUserDTO,
      options?: any
    ): AxiosPromise<LoginResponseDTO> {
      return localVarFp
        .logIn(loginUserDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LogoutUserDTO} logoutUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logOut(logoutUserDTO: LogoutUserDTO, options?: any): AxiosPromise<void> {
      return localVarFp
        .logOut(logoutUserDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {TokensDTO} tokensDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refresh(tokensDTO: TokensDTO, options?: any): AxiosPromise<TokensDTO> {
      return localVarFp
        .refresh(tokensDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(
      registerUserDTO: RegisterUserDTO,
      options?: any
    ): AxiosPromise<LoginResponseDTO> {
      return localVarFp
        .register(registerUserDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderStatus(
      orderId: string,
      updateOrderStatusDTO: UpdateOrderStatusDTO,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateOrderStatus(orderId, updateOrderStatusDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {string} companyId
   * @param {CreateOrderItemDTO} createOrderItemDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addItemToCart(
    companyId: string,
    createOrderItemDTO: CreateOrderItemDTO,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .addItemToCart(companyId, createOrderItemDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authorizationTest(options?: any) {
    return DefaultApiFp(this.configuration)
      .authorizationTest(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} productId
   * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createManyProductItems(
    productId: string,
    createManyProductItemsDTO: CreateManyProductItemsDTO,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .createManyProductItems(productId, createManyProductItemsDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} companyId
   * @param {CartDTO} cartDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createOrders(companyId: string, cartDTO: CartDTO, options?: any) {
    return DefaultApiFp(this.configuration)
      .createOrders(companyId, cartDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} companyId
   * @param {CreateProductDTO} createProductDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createProduct(
    companyId: string,
    createProductDTO: CreateProductDTO,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .createProduct(companyId, createProductDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} productId
   * @param {CreateProductItemDTO} createProductItemDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createProductItem(
    productId: string,
    createProductItemDTO: CreateProductItemDTO,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .createProductItem(productId, createProductItemDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} orderItemId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteOrderItem(orderItemId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .deleteOrderItem(orderItemId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteProduct(id: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .deleteProduct(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} productId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteProductItem(productId: string, id: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .deleteProductItem(productId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} orderItemId
   * @param {CreateOrderItemDTO} createOrderItemDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public editOrderItem(
    orderItemId: string,
    createOrderItemDTO: CreateOrderItemDTO,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .editOrderItem(orderItemId, createOrderItemDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {CreateProductDTO} createProductDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public editProduct(
    id: string,
    createProductDTO: CreateProductDTO,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .editProduct(id, createProductDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} productId
   * @param {string} id
   * @param {CreateProductItemDTO} createProductItemDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public editProductItem(
    productId: string,
    id: string,
    createProductItemDTO: CreateProductItemDTO,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .editProductItem(productId, id, createProductItemDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} companyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCart(companyId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getCart(companyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CommerceProductDTO} commerceProductDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCommerceProducts(
    commerceProductDTO: CommerceProductDTO,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .getCommerceProducts(commerceProductDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getHello(options?: any) {
    return DefaultApiFp(this.configuration)
      .getHello(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} companyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getIncomingOrders(companyId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getIncomingOrders(companyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} companyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getIncomingTransactionsForCompany(companyId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getIncomingTransactionsForCompany(companyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} orderId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getOrderById(orderId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getOrderById(orderId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} companyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getOutgoingOrders(companyId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getOutgoingOrders(companyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} companyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getOutgoingTransactionsForCompany(companyId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getOutgoingTransactionsForCompany(companyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} productId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProductItems(productId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getProductItems(productId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} companyId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProductsForCompany(companyId: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .getProductsForCompany(companyId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LoginUserDTO} loginUserDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public logIn(loginUserDTO: LoginUserDTO, options?: any) {
    return DefaultApiFp(this.configuration)
      .logIn(loginUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LogoutUserDTO} logoutUserDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public logOut(logoutUserDTO: LogoutUserDTO, options?: any) {
    return DefaultApiFp(this.configuration)
      .logOut(logoutUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {TokensDTO} tokensDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public refresh(tokensDTO: TokensDTO, options?: any) {
    return DefaultApiFp(this.configuration)
      .refresh(tokensDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RegisterUserDTO} registerUserDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public register(registerUserDTO: RegisterUserDTO, options?: any) {
    return DefaultApiFp(this.configuration)
      .register(registerUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} orderId
   * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateOrderStatus(
    orderId: string,
    updateOrderStatusDTO: UpdateOrderStatusDTO,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .updateOrderStatus(orderId, updateOrderStatusDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
