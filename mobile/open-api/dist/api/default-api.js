"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * LogisTech
 * API for LogisTech
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * DefaultApi - axios parameter creator
 * @export
 */
exports.DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} companyId
         * @param {CreateOrderItemDTO} createOrderItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCart: (companyId, createOrderItemDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("addItemToCart", "companyId", companyId);
            // verify required parameter 'createOrderItemDTO' is not null or undefined
            common_1.assertParamExists("addItemToCart", "createOrderItemDTO", createOrderItemDTO);
            const localVarPath = `/api/v1/cart/company/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createOrderItemDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {CreateOrderItemDTO} createOrderItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCartCustomer: (createOrderItemDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createOrderItemDTO' is not null or undefined
            common_1.assertParamExists("addItemToCartCustomer", "createOrderItemDTO", createOrderItemDTO);
            const localVarPath = `/api/v1/cart/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createOrderItemDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {AddStorageFacilityPartnerDTO} addStorageFacilityPartnerDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStorageFacilityPartners: (id, addStorageFacilityPartnerDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists("addStorageFacilityPartners", "id", id);
            // verify required parameter 'addStorageFacilityPartnerDTO' is not null or undefined
            common_1.assertParamExists("addStorageFacilityPartners", "addStorageFacilityPartnerDTO", addStorageFacilityPartnerDTO);
            const localVarPath = `/api/v1/company/{id}/storage-facility/partners`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(addStorageFacilityPartnerDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationTest: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/authorization-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} productId
         * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyProductItems: (productId, createManyProductItemsDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            common_1.assertParamExists("createManyProductItems", "productId", productId);
            // verify required parameter 'createManyProductItemsDTO' is not null or undefined
            common_1.assertParamExists("createManyProductItems", "createManyProductItemsDTO", createManyProductItemsDTO);
            const localVarPath = `/api/v1/product/{productId}/product-item/many`.replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createManyProductItemsDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {CartDTO} cartDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrders: (companyId, cartDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("createOrders", "companyId", companyId);
            // verify required parameter 'cartDTO' is not null or undefined
            common_1.assertParamExists("createOrders", "cartDTO", cartDTO);
            const localVarPath = `/api/v1/order/company/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(cartDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {CartDTO} cartDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrdersForCustomer: (cartDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cartDTO' is not null or undefined
            common_1.assertParamExists("createOrdersForCustomer", "cartDTO", cartDTO);
            const localVarPath = `/api/v1/order/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(cartDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {CreatePaymentDTO} createPaymentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: (createPaymentDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createPaymentDTO' is not null or undefined
            common_1.assertParamExists("createPayment", "createPaymentDTO", createPaymentDTO);
            const localVarPath = `/api/v1/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createPaymentDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {CreateProductDTO} createProductDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: (companyId, createProductDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("createProduct", "companyId", companyId);
            // verify required parameter 'createProductDTO' is not null or undefined
            common_1.assertParamExists("createProduct", "createProductDTO", createProductDTO);
            const localVarPath = `/api/v1/product/company/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createProductDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} productId
         * @param {CreateProductItemDTO} createProductItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductItem: (productId, createProductItemDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            common_1.assertParamExists("createProductItem", "productId", productId);
            // verify required parameter 'createProductItemDTO' is not null or undefined
            common_1.assertParamExists("createProductItem", "createProductItemDTO", createProductItemDTO);
            const localVarPath = `/api/v1/product/{productId}/product-item`.replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createProductItemDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {CreateReportDTO} createReportDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: (createReportDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createReportDTO' is not null or undefined
            common_1.assertParamExists("createReport", "createReportDTO", createReportDTO);
            const localVarPath = `/api/v1/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createReportDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} orderItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderItem: (orderItemId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderItemId' is not null or undefined
            common_1.assertParamExists("deleteOrderItem", "orderItemId", orderItemId);
            const localVarPath = `/api/v1/order-item/{orderItemId}`.replace(`{${"orderItemId"}}`, encodeURIComponent(String(orderItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists("deleteProduct", "id", id);
            const localVarPath = `/api/v1/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} productItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductItem: (productItemId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productItemId' is not null or undefined
            common_1.assertParamExists("deleteProductItem", "productItemId", productItemId);
            const localVarPath = `/api/v1/product/product-item/{productItemId}`.replace(`{${"productItemId"}}`, encodeURIComponent(String(productItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} orderItemId
         * @param {CreateOrderItemDTO} createOrderItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editOrderItem: (orderItemId, createOrderItemDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderItemId' is not null or undefined
            common_1.assertParamExists("editOrderItem", "orderItemId", orderItemId);
            // verify required parameter 'createOrderItemDTO' is not null or undefined
            common_1.assertParamExists("editOrderItem", "createOrderItemDTO", createOrderItemDTO);
            const localVarPath = `/api/v1/order-item/{orderItemId}`.replace(`{${"orderItemId"}}`, encodeURIComponent(String(orderItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createOrderItemDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {CreateProductDTO} createProductDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProduct: (id, createProductDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists("editProduct", "id", id);
            // verify required parameter 'createProductDTO' is not null or undefined
            common_1.assertParamExists("editProduct", "createProductDTO", createProductDTO);
            const localVarPath = `/api/v1/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createProductDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} productItemId
         * @param {CreateProductItemDTO} createProductItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProductItem: (productItemId, createProductItemDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productItemId' is not null or undefined
            common_1.assertParamExists("editProductItem", "productItemId", productItemId);
            // verify required parameter 'createProductItemDTO' is not null or undefined
            common_1.assertParamExists("editProductItem", "createProductItemDTO", createProductItemDTO);
            const localVarPath = `/api/v1/product/product-item/{productItemId}`.replace(`{${"productItemId"}}`, encodeURIComponent(String(productItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createProductItemDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableStorageFacilities: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists("getAvailableStorageFacilities", "id", id);
            const localVarPath = `/api/v1/company/{id}/storage-facility/available`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getCart", "companyId", companyId);
            const localVarPath = `/api/v1/cart/company/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartCustomer: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/cart/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {CommerceProductDTO} commerceProductDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommerceProducts: (companyId, commerceProductDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getCommerceProducts", "companyId", companyId);
            // verify required parameter 'commerceProductDTO' is not null or undefined
            common_1.assertParamExists("getCommerceProducts", "commerceProductDTO", commerceProductDTO);
            const localVarPath = `/api/v1/product/{companyId}/commerce`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(commerceProductDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouriers: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists("getCouriers", "id", id);
            const localVarPath = `/api/v1/company/{id}/couriers`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncomingOrders: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getIncomingOrders", "companyId", companyId);
            const localVarPath = `/api/v1/order/company/{companyId}/incoming`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncomingTransactionsForCompany: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getIncomingTransactionsForCompany", "companyId", companyId);
            const localVarPath = `/api/v1/transaction/incoming/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManufacturerChartData: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getManufacturerChartData", "companyId", companyId);
            const localVarPath = `/api/v1/order/company/{companyId}/manufacturer-chart-data`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById: (orderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            common_1.assertParamExists("getOrderById", "orderId", orderId);
            const localVarPath = `/api/v1/order/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersForStorageFacility: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getOrdersForStorageFacility", "companyId", companyId);
            const localVarPath = `/api/v1/order/company/{companyId}/storage-facility`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingOrders: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getOutgoingOrders", "companyId", companyId);
            const localVarPath = `/api/v1/order/company/{companyId}/outgoing`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingTransactionsForCompany: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getOutgoingTransactionsForCompany", "companyId", companyId);
            const localVarPath = `/api/v1/transaction/outgoing/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItemStatusQuantity: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getProductItemStatusQuantity", "companyId", companyId);
            const localVarPath = `/api/v1/product/company/{companyId}/product-item/status/quantity`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItems: (productId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productId' is not null or undefined
            common_1.assertParamExists("getProductItems", "productId", productId);
            const localVarPath = `/api/v1/product/{productId}/product-item`.replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {ProductItemByStatusDTO} productItemByStatusDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItemsByStatus: (companyId, productItemByStatusDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getProductItemsByStatus", "companyId", companyId);
            // verify required parameter 'productItemByStatusDTO' is not null or undefined
            common_1.assertParamExists("getProductItemsByStatus", "productItemByStatusDTO", productItemByStatusDTO);
            const localVarPath = `/api/v1/product/company/{companyId}/status`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(productItemByStatusDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {ProductItemByStatusDTO} productItemByStatusDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItemsByStatusAndUser: (productItemByStatusDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'productItemByStatusDTO' is not null or undefined
            common_1.assertParamExists("getProductItemsByStatusAndUser", "productItemByStatusDTO", productItemByStatusDTO);
            const localVarPath = `/api/v1/product/product-item/status/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(productItemByStatusDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsForCompany: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getProductsForCompany", "companyId", companyId);
            const localVarPath = `/api/v1/product/company/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getReports", "companyId", companyId);
            const localVarPath = `/api/v1/report/company/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailerChartData: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getRetailerChartData", "companyId", companyId);
            const localVarPath = `/api/v1/order/company/{companyId}/retailer-chart-data`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSales: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getSales", "companyId", companyId);
            const localVarPath = `/api/v1/order/company/{companyId}/sales`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellerPartners: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists("getSellerPartners", "id", id);
            const localVarPath = `/api/v1/company/{id}/seller-partners`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageFacilityChartData: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getStorageFacilityChartData", "companyId", companyId);
            const localVarPath = `/api/v1/order/company/{companyId}/storage-facility-chart-data`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageFacilityPartners: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists("getStorageFacilityPartners", "id", id);
            const localVarPath = `/api/v1/company/{id}/storage-facility/partners`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplierChartData: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getSupplierChartData", "companyId", companyId);
            const localVarPath = `/api/v1/order/company/{companyId}/supplier-chart-data`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopTenCustomers: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists("getTopTenCustomers", "id", id);
            const localVarPath = `/api/v1/company/{id}/top-ten-customers`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopTenProducts: (companyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'companyId' is not null or undefined
            common_1.assertParamExists("getTopTenProducts", "companyId", companyId);
            const localVarPath = `/api/v1/product/company/{companyId}/top-ten`.replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {LoginUserDTO} loginUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logIn: (loginUserDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'loginUserDTO' is not null or undefined
            common_1.assertParamExists("logIn", "loginUserDTO", loginUserDTO);
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(loginUserDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {LogoutUserDTO} logoutUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOut: (logoutUserDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'logoutUserDTO' is not null or undefined
            common_1.assertParamExists("logOut", "logoutUserDTO", logoutUserDTO);
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(logoutUserDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {TokensDTO} tokensDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: (tokensDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'tokensDTO' is not null or undefined
            common_1.assertParamExists("refresh", "tokensDTO", tokensDTO);
            const localVarPath = `/api/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tokensDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {RegisterUserDTO} registerUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: (registerUserDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'registerUserDTO' is not null or undefined
            common_1.assertParamExists("register", "registerUserDTO", registerUserDTO);
            const localVarPath = `/api/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(registerUserDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {string} storageFacilityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeStorageFacilityPartner: (id, storageFacilityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists("removeStorageFacilityPartner", "id", id);
            // verify required parameter 'storageFacilityId' is not null or undefined
            common_1.assertParamExists("removeStorageFacilityPartner", "storageFacilityId", storageFacilityId);
            const localVarPath = `/api/v1/company/{id}/storage-facility/partners/{storageFacilityId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"storageFacilityId"}}`, encodeURIComponent(String(storageFacilityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeWebhook: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/payment/stripe-webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} orderId
         * @param {UpdateOrderDTO} updateOrderDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: (orderId, updateOrderDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            common_1.assertParamExists("updateOrder", "orderId", orderId);
            // verify required parameter 'updateOrderDTO' is not null or undefined
            common_1.assertParamExists("updateOrder", "updateOrderDTO", updateOrderDTO);
            const localVarPath = `/api/v1/order/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateOrderDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} orderId
         * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus: (orderId, updateOrderStatusDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orderId' is not null or undefined
            common_1.assertParamExists("updateOrderStatus", "orderId", orderId);
            // verify required parameter 'updateOrderStatusDTO' is not null or undefined
            common_1.assertParamExists("updateOrderStatus", "updateOrderStatusDTO", updateOrderStatusDTO);
            const localVarPath = `/api/v1/order/{orderId}/status`.replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PATCH" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateOrderStatusDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {UpdateUserDTO} updateUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: (updateUserDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'updateUserDTO' is not null or undefined
            common_1.assertParamExists("updateUser", "updateUserDTO", updateUserDTO);
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateUserDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
exports.DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.DefaultApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} companyId
         * @param {CreateOrderItemDTO} createOrderItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCart(companyId, createOrderItemDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addItemToCart(companyId, createOrderItemDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {CreateOrderItemDTO} createOrderItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCartCustomer(createOrderItemDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addItemToCartCustomer(createOrderItemDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {AddStorageFacilityPartnerDTO} addStorageFacilityPartnerDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStorageFacilityPartners(id, addStorageFacilityPartnerDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addStorageFacilityPartners(id, addStorageFacilityPartnerDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationTest(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authorizationTest(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} productId
         * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyProductItems(productId, createManyProductItemsDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createManyProductItems(productId, createManyProductItemsDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {CartDTO} cartDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrders(companyId, cartDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createOrders(companyId, cartDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {CartDTO} cartDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrdersForCustomer(cartDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createOrdersForCustomer(cartDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {CreatePaymentDTO} createPaymentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment(createPaymentDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createPayment(createPaymentDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {CreateProductDTO} createProductDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(companyId, createProductDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createProduct(companyId, createProductDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} productId
         * @param {CreateProductItemDTO} createProductItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductItem(productId, createProductItemDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createProductItem(productId, createProductItemDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {CreateReportDTO} createReportDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(createReportDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createReport(createReportDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} orderItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderItem(orderItemId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteOrderItem(orderItemId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteProduct(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} productItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductItem(productItemId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteProductItem(productItemId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} orderItemId
         * @param {CreateOrderItemDTO} createOrderItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editOrderItem(orderItemId, createOrderItemDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.editOrderItem(orderItemId, createOrderItemDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {CreateProductDTO} createProductDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProduct(id, createProductDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.editProduct(id, createProductDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} productItemId
         * @param {CreateProductItemDTO} createProductItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProductItem(productItemId, createProductItemDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.editProductItem(productItemId, createProductItemDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableStorageFacilities(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAvailableStorageFacilities(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCart(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartCustomer(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCartCustomer(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {CommerceProductDTO} commerceProductDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommerceProducts(companyId, commerceProductDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCommerceProducts(companyId, commerceProductDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouriers(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCouriers(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getHello(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncomingOrders(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getIncomingOrders(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncomingTransactionsForCompany(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getIncomingTransactionsForCompany(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManufacturerChartData(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getManufacturerChartData(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById(orderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrderById(orderId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersForStorageFacility(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrdersForStorageFacility(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingOrders(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOutgoingOrders(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingTransactionsForCompany(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOutgoingTransactionsForCompany(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItemStatusQuantity(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProductItemStatusQuantity(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItems(productId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProductItems(productId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {ProductItemByStatusDTO} productItemByStatusDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItemsByStatus(companyId, productItemByStatusDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProductItemsByStatus(companyId, productItemByStatusDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {ProductItemByStatusDTO} productItemByStatusDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItemsByStatusAndUser(productItemByStatusDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProductItemsByStatusAndUser(productItemByStatusDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsForCompany(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProductsForCompany(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getReports(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailerChartData(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRetailerChartData(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSales(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSales(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellerPartners(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSellerPartners(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageFacilityChartData(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStorageFacilityChartData(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageFacilityPartners(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStorageFacilityPartners(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplierChartData(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSupplierChartData(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopTenCustomers(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopTenCustomers(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopTenProducts(companyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopTenProducts(companyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUser(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {LoginUserDTO} loginUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logIn(loginUserDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.logIn(loginUserDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {LogoutUserDTO} logoutUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOut(logoutUserDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.logOut(logoutUserDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {TokensDTO} tokensDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(tokensDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.refresh(tokensDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {RegisterUserDTO} registerUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerUserDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.register(registerUserDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} storageFacilityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeStorageFacilityPartner(id, storageFacilityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeStorageFacilityPartner(id, storageFacilityId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeWebhook(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.stripeWebhook(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} orderId
         * @param {UpdateOrderDTO} updateOrderDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(orderId, updateOrderDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateOrder(orderId, updateOrderDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} orderId
         * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus(orderId, updateOrderStatusDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateOrderStatus(orderId, updateOrderStatusDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {UpdateUserDTO} updateUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(updateUserDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUser(updateUserDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
exports.DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.DefaultApiFp(configuration);
    return {
        /**
         *
         * @param {string} companyId
         * @param {CreateOrderItemDTO} createOrderItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCart(companyId, createOrderItemDTO, options) {
            return localVarFp
                .addItemToCart(companyId, createOrderItemDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreateOrderItemDTO} createOrderItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCartCustomer(createOrderItemDTO, options) {
            return localVarFp
                .addItemToCartCustomer(createOrderItemDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {AddStorageFacilityPartnerDTO} addStorageFacilityPartnerDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStorageFacilityPartners(id, addStorageFacilityPartnerDTO, options) {
            return localVarFp
                .addStorageFacilityPartners(id, addStorageFacilityPartnerDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationTest(options) {
            return localVarFp
                .authorizationTest(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} productId
         * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyProductItems(productId, createManyProductItemsDTO, options) {
            return localVarFp
                .createManyProductItems(productId, createManyProductItemsDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {CartDTO} cartDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrders(companyId, cartDTO, options) {
            return localVarFp
                .createOrders(companyId, cartDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CartDTO} cartDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrdersForCustomer(cartDTO, options) {
            return localVarFp
                .createOrdersForCustomer(cartDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreatePaymentDTO} createPaymentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment(createPaymentDTO, options) {
            return localVarFp
                .createPayment(createPaymentDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {CreateProductDTO} createProductDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(companyId, createProductDTO, options) {
            return localVarFp
                .createProduct(companyId, createProductDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} productId
         * @param {CreateProductItemDTO} createProductItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductItem(productId, createProductItemDTO, options) {
            return localVarFp
                .createProductItem(productId, createProductItemDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreateReportDTO} createReportDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(createReportDTO, options) {
            return localVarFp
                .createReport(createReportDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} orderItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderItem(orderItemId, options) {
            return localVarFp
                .deleteOrderItem(orderItemId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(id, options) {
            return localVarFp
                .deleteProduct(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} productItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductItem(productItemId, options) {
            return localVarFp
                .deleteProductItem(productItemId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} orderItemId
         * @param {CreateOrderItemDTO} createOrderItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editOrderItem(orderItemId, createOrderItemDTO, options) {
            return localVarFp
                .editOrderItem(orderItemId, createOrderItemDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {CreateProductDTO} createProductDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProduct(id, createProductDTO, options) {
            return localVarFp
                .editProduct(id, createProductDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} productItemId
         * @param {CreateProductItemDTO} createProductItemDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProductItem(productItemId, createProductItemDTO, options) {
            return localVarFp
                .editProductItem(productItemId, createProductItemDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableStorageFacilities(id, options) {
            return localVarFp
                .getAvailableStorageFacilities(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(companyId, options) {
            return localVarFp
                .getCart(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartCustomer(options) {
            return localVarFp
                .getCartCustomer(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {CommerceProductDTO} commerceProductDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommerceProducts(companyId, commerceProductDTO, options) {
            return localVarFp
                .getCommerceProducts(companyId, commerceProductDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouriers(id, options) {
            return localVarFp
                .getCouriers(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello(options) {
            return localVarFp
                .getHello(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncomingOrders(companyId, options) {
            return localVarFp
                .getIncomingOrders(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncomingTransactionsForCompany(companyId, options) {
            return localVarFp
                .getIncomingTransactionsForCompany(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManufacturerChartData(companyId, options) {
            return localVarFp
                .getManufacturerChartData(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById(orderId, options) {
            return localVarFp
                .getOrderById(orderId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersForStorageFacility(companyId, options) {
            return localVarFp
                .getOrdersForStorageFacility(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingOrders(companyId, options) {
            return localVarFp
                .getOutgoingOrders(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingTransactionsForCompany(companyId, options) {
            return localVarFp
                .getOutgoingTransactionsForCompany(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItemStatusQuantity(companyId, options) {
            return localVarFp
                .getProductItemStatusQuantity(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItems(productId, options) {
            return localVarFp
                .getProductItems(productId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {ProductItemByStatusDTO} productItemByStatusDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItemsByStatus(companyId, productItemByStatusDTO, options) {
            return localVarFp
                .getProductItemsByStatus(companyId, productItemByStatusDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ProductItemByStatusDTO} productItemByStatusDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductItemsByStatusAndUser(productItemByStatusDTO, options) {
            return localVarFp
                .getProductItemsByStatusAndUser(productItemByStatusDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsForCompany(companyId, options) {
            return localVarFp
                .getProductsForCompany(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports(companyId, options) {
            return localVarFp
                .getReports(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetailerChartData(companyId, options) {
            return localVarFp
                .getRetailerChartData(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSales(companyId, options) {
            return localVarFp
                .getSales(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellerPartners(id, options) {
            return localVarFp
                .getSellerPartners(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageFacilityChartData(companyId, options) {
            return localVarFp
                .getStorageFacilityChartData(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageFacilityPartners(id, options) {
            return localVarFp
                .getStorageFacilityPartners(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplierChartData(companyId, options) {
            return localVarFp
                .getSupplierChartData(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopTenCustomers(id, options) {
            return localVarFp
                .getTopTenCustomers(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopTenProducts(companyId, options) {
            return localVarFp
                .getTopTenProducts(companyId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options) {
            return localVarFp
                .getUser(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {LoginUserDTO} loginUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logIn(loginUserDTO, options) {
            return localVarFp
                .logIn(loginUserDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {LogoutUserDTO} logoutUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOut(logoutUserDTO, options) {
            return localVarFp
                .logOut(logoutUserDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TokensDTO} tokensDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(tokensDTO, options) {
            return localVarFp
                .refresh(tokensDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {RegisterUserDTO} registerUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerUserDTO, options) {
            return localVarFp
                .register(registerUserDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {string} storageFacilityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeStorageFacilityPartner(id, storageFacilityId, options) {
            return localVarFp
                .removeStorageFacilityPartner(id, storageFacilityId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeWebhook(options) {
            return localVarFp
                .stripeWebhook(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} orderId
         * @param {UpdateOrderDTO} updateOrderDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(orderId, updateOrderDTO, options) {
            return localVarFp
                .updateOrder(orderId, updateOrderDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} orderId
         * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus(orderId, updateOrderStatusDTO, options) {
            return localVarFp
                .updateOrderStatus(orderId, updateOrderStatusDTO, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UpdateUserDTO} updateUserDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(updateUserDTO, options) {
            return localVarFp
                .updateUser(updateUserDTO, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addItemToCart(companyId, createOrderItemDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .addItemToCart(companyId, createOrderItemDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addItemToCartCustomer(createOrderItemDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .addItemToCartCustomer(createOrderItemDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {AddStorageFacilityPartnerDTO} addStorageFacilityPartnerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addStorageFacilityPartners(id, addStorageFacilityPartnerDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .addStorageFacilityPartners(id, addStorageFacilityPartnerDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authorizationTest(options) {
        return exports.DefaultApiFp(this.configuration)
            .authorizationTest(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} productId
     * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createManyProductItems(productId, createManyProductItemsDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .createManyProductItems(productId, createManyProductItemsDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createOrders(companyId, cartDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .createOrders(companyId, cartDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createOrdersForCustomer(cartDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .createOrdersForCustomer(cartDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreatePaymentDTO} createPaymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createPayment(createPaymentDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .createPayment(createPaymentDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createProduct(companyId, createProductDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .createProduct(companyId, createProductDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} productId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createProductItem(productId, createProductItemDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .createProductItem(productId, createProductItemDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreateReportDTO} createReportDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createReport(createReportDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .createReport(createReportDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteOrderItem(orderItemId, options) {
        return exports.DefaultApiFp(this.configuration)
            .deleteOrderItem(orderItemId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteProduct(id, options) {
        return exports.DefaultApiFp(this.configuration)
            .deleteProduct(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} productItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteProductItem(productItemId, options) {
        return exports.DefaultApiFp(this.configuration)
            .deleteProductItem(productItemId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} orderItemId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    editOrderItem(orderItemId, createOrderItemDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .editOrderItem(orderItemId, createOrderItemDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    editProduct(id, createProductDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .editProduct(id, createProductDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} productItemId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    editProductItem(productItemId, createProductItemDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .editProductItem(productItemId, createProductItemDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAvailableStorageFacilities(id, options) {
        return exports.DefaultApiFp(this.configuration)
            .getAvailableStorageFacilities(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCart(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getCart(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCartCustomer(options) {
        return exports.DefaultApiFp(this.configuration)
            .getCartCustomer(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {CommerceProductDTO} commerceProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCommerceProducts(companyId, commerceProductDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .getCommerceProducts(companyId, commerceProductDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCouriers(id, options) {
        return exports.DefaultApiFp(this.configuration)
            .getCouriers(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getHello(options) {
        return exports.DefaultApiFp(this.configuration)
            .getHello(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIncomingOrders(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getIncomingOrders(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIncomingTransactionsForCompany(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getIncomingTransactionsForCompany(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getManufacturerChartData(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getManufacturerChartData(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrderById(orderId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getOrderById(orderId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrdersForStorageFacility(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getOrdersForStorageFacility(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOutgoingOrders(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getOutgoingOrders(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOutgoingTransactionsForCompany(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getOutgoingTransactionsForCompany(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductItemStatusQuantity(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getProductItemStatusQuantity(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductItems(productId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getProductItems(productId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductItemsByStatus(companyId, productItemByStatusDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .getProductItemsByStatus(companyId, productItemByStatusDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductItemsByStatusAndUser(productItemByStatusDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .getProductItemsByStatusAndUser(productItemByStatusDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductsForCompany(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getProductsForCompany(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getReports(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getReports(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getRetailerChartData(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getRetailerChartData(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSales(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getSales(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSellerPartners(id, options) {
        return exports.DefaultApiFp(this.configuration)
            .getSellerPartners(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getStorageFacilityChartData(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getStorageFacilityChartData(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getStorageFacilityPartners(id, options) {
        return exports.DefaultApiFp(this.configuration)
            .getStorageFacilityPartners(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSupplierChartData(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getSupplierChartData(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTopTenCustomers(id, options) {
        return exports.DefaultApiFp(this.configuration)
            .getTopTenCustomers(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTopTenProducts(companyId, options) {
        return exports.DefaultApiFp(this.configuration)
            .getTopTenProducts(companyId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUser(options) {
        return exports.DefaultApiFp(this.configuration)
            .getUser(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    logIn(loginUserDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .logIn(loginUserDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {LogoutUserDTO} logoutUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    logOut(logoutUserDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .logOut(logoutUserDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TokensDTO} tokensDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    refresh(tokensDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .refresh(tokensDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    register(registerUserDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .register(registerUserDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {string} storageFacilityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    removeStorageFacilityPartner(id, storageFacilityId, options) {
        return exports.DefaultApiFp(this.configuration)
            .removeStorageFacilityPartner(id, storageFacilityId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stripeWebhook(options) {
        return exports.DefaultApiFp(this.configuration)
            .stripeWebhook(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderDTO} updateOrderDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateOrder(orderId, updateOrderDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .updateOrder(orderId, updateOrderDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateOrderStatus(orderId, updateOrderStatusDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .updateOrderStatus(orderId, updateOrderStatusDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UpdateUserDTO} updateUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateUser(updateUserDTO, options) {
        return exports.DefaultApiFp(this.configuration)
            .updateUser(updateUserDTO, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
