/**
 * LogisTech
 * API for LogisTech
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
import { RequestArgs, BaseAPI } from "../base";
import { AddStorageFacilityPartnerDTO } from "../models";
import { CartDTO } from "../models";
import { CommerceProductDTO } from "../models";
import { CompanyDTO } from "../models";
import { CourierProductItemsDTO } from "../models";
import { CreateManyProductItemsDTO } from "../models";
import { CreateOrderFromOrderItemsDTO } from "../models";
import { CreateOrderItemDTO } from "../models";
import { CreatePaymentDTO } from "../models";
import { CreateProductDTO } from "../models";
import { CreateProductItemDTO } from "../models";
import { CreateReportDTO } from "../models";
import { LoginResponseDTO } from "../models";
import { LoginUserDTO } from "../models";
import { LogoutUserDTO } from "../models";
import { ManufacturerChartDataDTO } from "../models";
import { OrderDTO } from "../models";
import { PaymentUrlDTO } from "../models";
import { ProductDTO } from "../models";
import { ProductItemByStatusDTO } from "../models";
import { ProductItemDTO } from "../models";
import { ProductItemLocationDTO } from "../models";
import { ProductItemStatusQuantityDTO } from "../models";
import { RegisterUserDTO } from "../models";
import { ReportDTO } from "../models";
import { RetailerChartDataDTO } from "../models";
import { SalesDTO } from "../models";
import { StorageFacilityChartDataDTO } from "../models";
import { SupplierChartDataDTO } from "../models";
import { TokensDTO } from "../models";
import { TransactionDTO } from "../models";
import { UpdateOrderDTO } from "../models";
import { UpdateOrderStatusDTO } from "../models";
import { UpdateProductItemStatusDTO } from "../models";
import { UpdateUserDTO } from "../models";
import { UserDTO } from "../models";
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCart: (companyId: string, createOrderItemDTO: CreateOrderItemDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCartCustomer: (createOrderItemDTO: CreateOrderItemDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {AddStorageFacilityPartnerDTO} addStorageFacilityPartnerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStorageFacilityPartners: (id: string, addStorageFacilityPartnerDTO: AddStorageFacilityPartnerDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizationTest: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} productId
     * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyProductItems: (productId: string, createManyProductItemsDTO: CreateManyProductItemsDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrders: (companyId: string, cartDTO: CartDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrdersForCustomer: (cartDTO: CartDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderFromOrderItemsDTO} createOrderFromOrderItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrdersFromOrderItems: (companyId: string, createOrderFromOrderItemsDTO: CreateOrderFromOrderItemsDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {CreateOrderFromOrderItemsDTO} createOrderFromOrderItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrdersFromOrderItemsForCustomer: (createOrderFromOrderItemsDTO: CreateOrderFromOrderItemsDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {CreatePaymentDTO} createPaymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment: (createPaymentDTO: CreatePaymentDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct: (companyId: string, createProductDTO: CreateProductDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} productId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductItem: (productId: string, createProductItemDTO: CreateProductItemDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {CreateReportDTO} createReportDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport: (createReportDTO: CreateReportDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderItem: (orderItemId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} productItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductItem: (productItemId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} orderItemId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editOrderItem: (orderItemId: string, createOrderItemDTO: CreateOrderItemDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProduct: (id: string, createProductDTO: CreateProductDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} productItemId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProductItem: (productItemId: string, createProductItemDTO: CreateProductItemDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableStorageFacilities: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCart: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCartCustomer: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {CommerceProductDTO} commerceProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommerceProducts: (companyId: string, commerceProductDTO: CommerceProductDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourierAssignedProductItems: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCouriers: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingOrders: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingTransactionsForCompany: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManufacturerChartData: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById: (orderId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersForStorageFacility: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingOrders: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingOrdersForCustomer: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingTransactionsForCompany: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaidOrdersForStorageFacility: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItemStatusQuantity: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItems: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItemsByStatus: (companyId: string, productItemByStatusDTO: ProductItemByStatusDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItemsByStatusAndUser: (productItemByStatusDTO: ProductItemByStatusDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsForCompany: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetailerChartData: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReturnedProductItems: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSales: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSellerPartners: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageFacilityChartData: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageFacilityPartners: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupplierChartData: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopTenCustomers: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopTenProducts: (companyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logIn: (loginUserDTO: LoginUserDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {LogoutUserDTO} logoutUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logOut: (logoutUserDTO: LogoutUserDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {TokensDTO} tokensDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refresh: (tokensDTO: TokensDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: (registerUserDTO: RegisterUserDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProfilePicture: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {string} storageFacilityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeStorageFacilityPartner: (id: string, storageFacilityId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} productItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnProductItem: (productItemId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeWebhook: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderDTO} updateOrderDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder: (orderId: string, updateOrderDTO: UpdateOrderDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderStatus: (orderId: string, updateOrderStatusDTO: UpdateOrderStatusDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {ProductItemLocationDTO} productItemLocationDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductItemLocation: (productItemLocationDTO: ProductItemLocationDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} productItemId
     * @param {UpdateProductItemStatusDTO} updateProductItemStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductItemStatus: (productItemId: string, updateProductItemStatusDTO: UpdateProductItemStatusDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {UpdateUserDTO} updateUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (updateUserDTO: UpdateUserDTO, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProfilePicture: (options?: any) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCart(companyId: string, createOrderItemDTO: CreateOrderItemDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCartCustomer(createOrderItemDTO: CreateOrderItemDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} id
     * @param {AddStorageFacilityPartnerDTO} addStorageFacilityPartnerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStorageFacilityPartners(id: string, addStorageFacilityPartnerDTO: AddStorageFacilityPartnerDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizationTest(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {string} productId
     * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyProductItems(productId: string, createManyProductItemsDTO: CreateManyProductItemsDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} companyId
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrders(companyId: string, cartDTO: CartDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>>;
    /**
     *
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrdersForCustomer(cartDTO: CartDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderFromOrderItemsDTO} createOrderFromOrderItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrdersFromOrderItems(companyId: string, createOrderFromOrderItemsDTO: CreateOrderFromOrderItemsDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>>;
    /**
     *
     * @param {CreateOrderFromOrderItemsDTO} createOrderFromOrderItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrdersFromOrderItemsForCustomer(createOrderFromOrderItemsDTO: CreateOrderFromOrderItemsDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>>;
    /**
     *
     * @param {CreatePaymentDTO} createPaymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment(createPaymentDTO: CreatePaymentDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentUrlDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(companyId: string, createProductDTO: CreateProductDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {string} productId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductItem(productId: string, createProductItemDTO: CreateProductItemDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductItemDTO>>;
    /**
     *
     * @param {CreateReportDTO} createReportDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(createReportDTO: CreateReportDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderItem(orderItemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {string} productItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductItem(productItemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} orderItemId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editOrderItem(orderItemId: string, createOrderItemDTO: CreateOrderItemDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} id
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProduct(id: string, createProductDTO: CreateProductDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {string} productItemId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProductItem(productItemId: string, createProductItemDTO: CreateProductItemDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableStorageFacilities(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCart(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCartCustomer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {CommerceProductDTO} commerceProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommerceProducts(companyId: string, commerceProductDTO: CommerceProductDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDTO>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourierAssignedProductItems(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourierProductItemsDTO>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCouriers(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingOrders(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingTransactionsForCompany(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManufacturerChartData(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ManufacturerChartDataDTO>>>;
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersForStorageFacility(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingOrders(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingOrdersForCustomer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingTransactionsForCompany(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaidOrdersForStorageFacility(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItemStatusQuantity(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductItemStatusQuantityDTO>>;
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItems(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductItemDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItemsByStatus(companyId: string, productItemByStatusDTO: ProductItemByStatusDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductItemDTO>>>;
    /**
     *
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItemsByStatusAndUser(productItemByStatusDTO: ProductItemByStatusDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductItemDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsForCompany(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReportDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetailerChartData(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RetailerChartDataDTO>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReturnedProductItems(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductItemDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSales(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SalesDTO>>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSellerPartners(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageFacilityChartData(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StorageFacilityChartDataDTO>>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageFacilityPartners(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupplierChartData(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SupplierChartDataDTO>>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopTenCustomers(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyDTO>>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopTenProducts(companyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDTO>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>>;
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logIn(loginUserDTO: LoginUserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDTO>>;
    /**
     *
     * @param {LogoutUserDTO} logoutUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logOut(logoutUserDTO: LogoutUserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {TokensDTO} tokensDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refresh(tokensDTO: TokensDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensDTO>>;
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(registerUserDTO: RegisterUserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProfilePicture(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>>;
    /**
     *
     * @param {string} id
     * @param {string} storageFacilityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeStorageFacilityPartner(id: string, storageFacilityId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} productItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnProductItem(productItemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeWebhook(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderDTO} updateOrderDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(orderId: string, updateOrderDTO: UpdateOrderDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderStatus(orderId: string, updateOrderStatusDTO: UpdateOrderStatusDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {ProductItemLocationDTO} productItemLocationDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductItemLocation(productItemLocationDTO: ProductItemLocationDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} productItemId
     * @param {UpdateProductItemStatusDTO} updateProductItemStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductItemStatus(productItemId: string, updateProductItemStatusDTO: UpdateProductItemStatusDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {UpdateUserDTO} updateUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(updateUserDTO: UpdateUserDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProfilePicture(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCart(companyId: string, createOrderItemDTO: CreateOrderItemDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCartCustomer(createOrderItemDTO: CreateOrderItemDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {AddStorageFacilityPartnerDTO} addStorageFacilityPartnerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStorageFacilityPartners(id: string, addStorageFacilityPartnerDTO: AddStorageFacilityPartnerDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizationTest(options?: any): AxiosPromise<string>;
    /**
     *
     * @param {string} productId
     * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyProductItems(productId: string, createManyProductItemsDTO: CreateManyProductItemsDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} companyId
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrders(companyId: string, cartDTO: CartDTO, options?: any): AxiosPromise<Array<OrderDTO>>;
    /**
     *
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrdersForCustomer(cartDTO: CartDTO, options?: any): AxiosPromise<Array<OrderDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderFromOrderItemsDTO} createOrderFromOrderItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrdersFromOrderItems(companyId: string, createOrderFromOrderItemsDTO: CreateOrderFromOrderItemsDTO, options?: any): AxiosPromise<Array<OrderDTO>>;
    /**
     *
     * @param {CreateOrderFromOrderItemsDTO} createOrderFromOrderItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrdersFromOrderItemsForCustomer(createOrderFromOrderItemsDTO: CreateOrderFromOrderItemsDTO, options?: any): AxiosPromise<Array<OrderDTO>>;
    /**
     *
     * @param {CreatePaymentDTO} createPaymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment(createPaymentDTO: CreatePaymentDTO, options?: any): AxiosPromise<PaymentUrlDTO>;
    /**
     *
     * @param {string} companyId
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(companyId: string, createProductDTO: CreateProductDTO, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {string} productId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductItem(productId: string, createProductItemDTO: CreateProductItemDTO, options?: any): AxiosPromise<ProductItemDTO>;
    /**
     *
     * @param {CreateReportDTO} createReportDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createReport(createReportDTO: CreateReportDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrderItem(orderItemId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(id: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {string} productItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductItem(productItemId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} orderItemId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editOrderItem(orderItemId: string, createOrderItemDTO: CreateOrderItemDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProduct(id: string, createProductDTO: CreateProductDTO, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {string} productItemId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editProductItem(productItemId: string, createProductItemDTO: CreateProductItemDTO, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableStorageFacilities(id: string, options?: any): AxiosPromise<Array<CompanyDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCart(companyId: string, options?: any): AxiosPromise<CartDTO>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCartCustomer(options?: any): AxiosPromise<CartDTO>;
    /**
     *
     * @param {string} companyId
     * @param {CommerceProductDTO} commerceProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommerceProducts(companyId: string, commerceProductDTO: CommerceProductDTO, options?: any): AxiosPromise<Array<ProductDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourierAssignedProductItems(options?: any): AxiosPromise<CourierProductItemsDTO>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCouriers(id: string, options?: any): AxiosPromise<Array<UserDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello(options?: any): AxiosPromise<string>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingOrders(companyId: string, options?: any): AxiosPromise<Array<OrderDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncomingTransactionsForCompany(companyId: string, options?: any): AxiosPromise<Array<TransactionDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManufacturerChartData(companyId: string, options?: any): AxiosPromise<Array<ManufacturerChartDataDTO>>;
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById(orderId: string, options?: any): AxiosPromise<OrderDTO>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersForStorageFacility(companyId: string, options?: any): AxiosPromise<Array<OrderDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingOrders(companyId: string, options?: any): AxiosPromise<Array<OrderDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingOrdersForCustomer(options?: any): AxiosPromise<Array<OrderDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOutgoingTransactionsForCompany(companyId: string, options?: any): AxiosPromise<Array<TransactionDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaidOrdersForStorageFacility(companyId: string, options?: any): AxiosPromise<Array<OrderDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItemStatusQuantity(companyId: string, options?: any): AxiosPromise<ProductItemStatusQuantityDTO>;
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItems(productId: string, options?: any): AxiosPromise<Array<ProductItemDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItemsByStatus(companyId: string, productItemByStatusDTO: ProductItemByStatusDTO, options?: any): AxiosPromise<Array<ProductItemDTO>>;
    /**
     *
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductItemsByStatusAndUser(productItemByStatusDTO: ProductItemByStatusDTO, options?: any): AxiosPromise<Array<ProductItemDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsForCompany(companyId: string, options?: any): AxiosPromise<Array<ProductDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(companyId: string, options?: any): AxiosPromise<Array<ReportDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetailerChartData(companyId: string, options?: any): AxiosPromise<Array<RetailerChartDataDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReturnedProductItems(options?: any): AxiosPromise<Array<ProductItemDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSales(companyId: string, options?: any): AxiosPromise<Array<SalesDTO>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSellerPartners(id: string, options?: any): AxiosPromise<Array<CompanyDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageFacilityChartData(companyId: string, options?: any): AxiosPromise<Array<StorageFacilityChartDataDTO>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStorageFacilityPartners(id: string, options?: any): AxiosPromise<Array<CompanyDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupplierChartData(companyId: string, options?: any): AxiosPromise<Array<SupplierChartDataDTO>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopTenCustomers(id: string, options?: any): AxiosPromise<Array<CompanyDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopTenProducts(companyId: string, options?: any): AxiosPromise<Array<ProductDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(options?: any): AxiosPromise<UserDTO>;
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logIn(loginUserDTO: LoginUserDTO, options?: any): AxiosPromise<LoginResponseDTO>;
    /**
     *
     * @param {LogoutUserDTO} logoutUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logOut(logoutUserDTO: LogoutUserDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {TokensDTO} tokensDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refresh(tokensDTO: TokensDTO, options?: any): AxiosPromise<TokensDTO>;
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(registerUserDTO: RegisterUserDTO, options?: any): AxiosPromise<LoginResponseDTO>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeProfilePicture(options?: any): AxiosPromise<UserDTO>;
    /**
     *
     * @param {string} id
     * @param {string} storageFacilityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeStorageFacilityPartner(id: string, storageFacilityId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} productItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnProductItem(productItemId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeWebhook(options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderDTO} updateOrderDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(orderId: string, updateOrderDTO: UpdateOrderDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrderStatus(orderId: string, updateOrderStatusDTO: UpdateOrderStatusDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {ProductItemLocationDTO} productItemLocationDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductItemLocation(productItemLocationDTO: ProductItemLocationDTO, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} productItemId
     * @param {UpdateProductItemStatusDTO} updateProductItemStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductItemStatus(productItemId: string, updateProductItemStatusDTO: UpdateProductItemStatusDTO, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {UpdateUserDTO} updateUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(updateUserDTO: UpdateUserDTO, options?: any): AxiosPromise<UserDTO>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProfilePicture(options?: any): AxiosPromise<UserDTO>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addItemToCart(companyId: string, createOrderItemDTO: CreateOrderItemDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addItemToCartCustomer(createOrderItemDTO: CreateOrderItemDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} id
     * @param {AddStorageFacilityPartnerDTO} addStorageFacilityPartnerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addStorageFacilityPartners(id: string, addStorageFacilityPartnerDTO: AddStorageFacilityPartnerDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    authorizationTest(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @param {string} productId
     * @param {CreateManyProductItemsDTO} createManyProductItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createManyProductItems(productId: string, createManyProductItemsDTO: CreateManyProductItemsDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} companyId
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createOrders(companyId: string, cartDTO: CartDTO, options?: any): Promise<import("axios").AxiosResponse<OrderDTO[]>>;
    /**
     *
     * @param {CartDTO} cartDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createOrdersForCustomer(cartDTO: CartDTO, options?: any): Promise<import("axios").AxiosResponse<OrderDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {CreateOrderFromOrderItemsDTO} createOrderFromOrderItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createOrdersFromOrderItems(companyId: string, createOrderFromOrderItemsDTO: CreateOrderFromOrderItemsDTO, options?: any): Promise<import("axios").AxiosResponse<OrderDTO[]>>;
    /**
     *
     * @param {CreateOrderFromOrderItemsDTO} createOrderFromOrderItemsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createOrdersFromOrderItemsForCustomer(createOrderFromOrderItemsDTO: CreateOrderFromOrderItemsDTO, options?: any): Promise<import("axios").AxiosResponse<OrderDTO[]>>;
    /**
     *
     * @param {CreatePaymentDTO} createPaymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createPayment(createPaymentDTO: CreatePaymentDTO, options?: any): Promise<import("axios").AxiosResponse<PaymentUrlDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createProduct(companyId: string, createProductDTO: CreateProductDTO, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @param {string} productId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createProductItem(productId: string, createProductItemDTO: CreateProductItemDTO, options?: any): Promise<import("axios").AxiosResponse<ProductItemDTO>>;
    /**
     *
     * @param {CreateReportDTO} createReportDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createReport(createReportDTO: CreateReportDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} orderItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteOrderItem(orderItemId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteProduct(id: string, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @param {string} productItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteProductItem(productItemId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} orderItemId
     * @param {CreateOrderItemDTO} createOrderItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    editOrderItem(orderItemId: string, createOrderItemDTO: CreateOrderItemDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} id
     * @param {CreateProductDTO} createProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    editProduct(id: string, createProductDTO: CreateProductDTO, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @param {string} productItemId
     * @param {CreateProductItemDTO} createProductItemDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    editProductItem(productItemId: string, createProductItemDTO: CreateProductItemDTO, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAvailableStorageFacilities(id: string, options?: any): Promise<import("axios").AxiosResponse<CompanyDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCart(companyId: string, options?: any): Promise<import("axios").AxiosResponse<CartDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCartCustomer(options?: any): Promise<import("axios").AxiosResponse<CartDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {CommerceProductDTO} commerceProductDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCommerceProducts(companyId: string, commerceProductDTO: CommerceProductDTO, options?: any): Promise<import("axios").AxiosResponse<ProductDTO[]>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCourierAssignedProductItems(options?: any): Promise<import("axios").AxiosResponse<CourierProductItemsDTO>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCouriers(id: string, options?: any): Promise<import("axios").AxiosResponse<UserDTO[]>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getHello(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIncomingOrders(companyId: string, options?: any): Promise<import("axios").AxiosResponse<OrderDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getIncomingTransactionsForCompany(companyId: string, options?: any): Promise<import("axios").AxiosResponse<TransactionDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getManufacturerChartData(companyId: string, options?: any): Promise<import("axios").AxiosResponse<ManufacturerChartDataDTO[]>>;
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrderById(orderId: string, options?: any): Promise<import("axios").AxiosResponse<OrderDTO>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrdersForStorageFacility(companyId: string, options?: any): Promise<import("axios").AxiosResponse<OrderDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOutgoingOrders(companyId: string, options?: any): Promise<import("axios").AxiosResponse<OrderDTO[]>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOutgoingOrdersForCustomer(options?: any): Promise<import("axios").AxiosResponse<OrderDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOutgoingTransactionsForCompany(companyId: string, options?: any): Promise<import("axios").AxiosResponse<TransactionDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPaidOrdersForStorageFacility(companyId: string, options?: any): Promise<import("axios").AxiosResponse<OrderDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductItemStatusQuantity(companyId: string, options?: any): Promise<import("axios").AxiosResponse<ProductItemStatusQuantityDTO>>;
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductItems(productId: string, options?: any): Promise<import("axios").AxiosResponse<ProductItemDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductItemsByStatus(companyId: string, productItemByStatusDTO: ProductItemByStatusDTO, options?: any): Promise<import("axios").AxiosResponse<ProductItemDTO[]>>;
    /**
     *
     * @param {ProductItemByStatusDTO} productItemByStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductItemsByStatusAndUser(productItemByStatusDTO: ProductItemByStatusDTO, options?: any): Promise<import("axios").AxiosResponse<ProductItemDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getProductsForCompany(companyId: string, options?: any): Promise<import("axios").AxiosResponse<ProductDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getReports(companyId: string, options?: any): Promise<import("axios").AxiosResponse<ReportDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getRetailerChartData(companyId: string, options?: any): Promise<import("axios").AxiosResponse<RetailerChartDataDTO[]>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getReturnedProductItems(options?: any): Promise<import("axios").AxiosResponse<ProductItemDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSales(companyId: string, options?: any): Promise<import("axios").AxiosResponse<SalesDTO[]>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSellerPartners(id: string, options?: any): Promise<import("axios").AxiosResponse<CompanyDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getStorageFacilityChartData(companyId: string, options?: any): Promise<import("axios").AxiosResponse<StorageFacilityChartDataDTO[]>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getStorageFacilityPartners(id: string, options?: any): Promise<import("axios").AxiosResponse<CompanyDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSupplierChartData(companyId: string, options?: any): Promise<import("axios").AxiosResponse<SupplierChartDataDTO[]>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTopTenCustomers(id: string, options?: any): Promise<import("axios").AxiosResponse<CompanyDTO[]>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTopTenProducts(companyId: string, options?: any): Promise<import("axios").AxiosResponse<ProductDTO[]>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUser(options?: any): Promise<import("axios").AxiosResponse<UserDTO>>;
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    logIn(loginUserDTO: LoginUserDTO, options?: any): Promise<import("axios").AxiosResponse<LoginResponseDTO>>;
    /**
     *
     * @param {LogoutUserDTO} logoutUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    logOut(logoutUserDTO: LogoutUserDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {TokensDTO} tokensDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    refresh(tokensDTO: TokensDTO, options?: any): Promise<import("axios").AxiosResponse<TokensDTO>>;
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    register(registerUserDTO: RegisterUserDTO, options?: any): Promise<import("axios").AxiosResponse<LoginResponseDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    removeProfilePicture(options?: any): Promise<import("axios").AxiosResponse<UserDTO>>;
    /**
     *
     * @param {string} id
     * @param {string} storageFacilityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    removeStorageFacilityPartner(id: string, storageFacilityId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} productItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    returnProductItem(productItemId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stripeWebhook(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderDTO} updateOrderDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateOrder(orderId: string, updateOrderDTO: UpdateOrderDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} orderId
     * @param {UpdateOrderStatusDTO} updateOrderStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateOrderStatus(orderId: string, updateOrderStatusDTO: UpdateOrderStatusDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {ProductItemLocationDTO} productItemLocationDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateProductItemLocation(productItemLocationDTO: ProductItemLocationDTO, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} productItemId
     * @param {UpdateProductItemStatusDTO} updateProductItemStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateProductItemStatus(productItemId: string, updateProductItemStatusDTO: UpdateProductItemStatusDTO, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @param {UpdateUserDTO} updateUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateUser(updateUserDTO: UpdateUserDTO, options?: any): Promise<import("axios").AxiosResponse<UserDTO>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    uploadProfilePicture(options?: any): Promise<import("axios").AxiosResponse<UserDTO>>;
}
