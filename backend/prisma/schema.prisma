// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String   @id @default(uuid())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  email                     String   @unique
  username                  String   @unique
  password                  String
  currentHashedRefreshToken String?
  companyId                 String?
  company                   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role                      UserRole
  imageUrl                  String?
  cloudinaryPublicId        String?
  address                   String
  addressLongitude          Float?
  addressLatitude           Float?

  courierOrders         Order[]       @relation("courierOrder")
  customerOrders        Order[]       @relation("customerOrder")
  reports               Report[]
  productItems          ProductItem[] @relation("productItems")
  returningProductItems ProductItem[] @relation("returningProductItems")
  cart                  Cart?
  transactions          Transaction[]
}

enum UserRole {
  CUSTOMER
  SUPPLIER_PACKAGING_PERSONNEL
  SUPPLIER_SALES_IN_CHARGE
  SUPPLIER_LOGISTICS_IN_CHARGE
  SUPPLIER_SUPERVISOR
  STORAGE_FACILITY_COURIER_PERSONNEL
  STORAGE_FACILITY_LOGISTICS_IN_CHARGE
  STORAGE_FACILITY_SUPERVISOR
  MANUFACTURER_PACKAGING_PERSONNEL
  MANUFACTURER_SALES_IN_CHARGE
  MANUFACTURER_LOGISTICS_IN_CHARGE
  MANUFACTURER_COURIER_PERSONNEL
  MANUFACTURER_SUPERVISOR
  COURIER
  RETAILER_SUPERVISOR
}

model Company {
  id               String      @id @default(uuid())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  type             CompanyType
  name             String
  address          String
  addressLatitude  Float
  addressLongitude Float
  contactNumber    String      @default("")
  email            String      @default("")

  products              Product[]
  employees             User[]
  sendingTransactions   Transaction[] @relation("sendingCompany")
  receivingTransactions Transaction[] @relation("receivingCompany")
  cart                  Cart?
  orderItems            OrderItem[]
  outgoingOrders        Order[]       @relation("fromCompany")
  incomingOrders        Order[]       @relation("toCompany")

  storageFacilityPartners Company[] @relation("storageFacilitySellerPartners")
  sellerPartners          Company[] @relation("storageFacilitySellerPartners")

  orders       Order[]       @relation("storageFacilityOrder")
  productItems ProductItem[]
}

enum CompanyType {
  STORAGE_FACILITY
  SUPPLIER
  MANUFACTURER
  RETAILER
}

model Product {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  name               String
  price              Float
  bulk               Boolean
  bulkQuantity       Int?
  imageUrl           String?
  cloudinaryPublicId String?

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  productItems ProductItem[]
  orderItems   OrderItem[]
}

model ProductItem {
  id         String            @id @default(uuid())
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  rfid       String?           @unique
  status     ProductItemStatus
  returnedAt DateTime?

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  transactionId String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  orderItemId String?
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  customerId String?
  customer   User?   @relation("productItems", fields: [customerId], references: [id], onDelete: Cascade)

  courierId String?
  courier   User?   @relation("returningProductItems", fields: [courierId], references: [id], onDelete: Cascade)

  buyerId String?
  buyer   Company? @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  reports Report[]
}

enum ProductItemStatus {
  IN_STORAGE
  ON_HOLD
  TO_BE_PICKED_UP
  IN_TRANSIT_TO_STORAGE_FACILITY
  IN_STORAGE_FACILITY
  IN_TRANSIT_TO_BUYER
  COMPLETE
  CANCELED
  RED_FLAG
  RETURNING
  RETURNED
}

model Report {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String

  productItemId String
  productItem   ProductItem @relation(fields: [productItemId], references: [id], onDelete: Cascade)

  reportedById String
  reportedBy   User   @relation(fields: [reportedById], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sendingCompanyId   String
  sendingCompany     Company  @relation("sendingCompany", fields: [sendingCompanyId], references: [id])
  receivingCompanyId String?
  receivingCompany   Company? @relation("receivingCompany", fields: [receivingCompanyId], references: [id])
  customerId         String?
  customer           User?    @relation(fields: [customerId], references: [id])

  productItems ProductItem[]
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  total     Float

  companyId String?  @unique
  company   Company? @relation(fields: [companyId], references: [id])

  customerId String? @unique
  customer   User?   @relation(fields: [customerId], references: [id])

  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Float

  cartId String?
  cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  owningCompanyId String
  owningCompany   Company @relation(fields: [owningCompanyId], references: [id], onDelete: Cascade)

  productItems ProductItem[]
}

model Order {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  status        OrderStatus
  total         Float
  invoiceNumber Int
  finalized     Boolean     @default(false)
  paidAt        DateTime?

  orderItems OrderItem[]
  payments   Payment[]

  fromCompanyId String?
  fromCompany   Company? @relation("fromCompany", fields: [fromCompanyId], references: [id], onDelete: Cascade)
  toCompanyId   String
  toCompany     Company  @relation("toCompany", fields: [toCompanyId], references: [id], onDelete: Cascade)

  storageFacilityId String?
  storageFacility   Company? @relation("storageFacilityOrder", fields: [storageFacilityId], references: [id])

  courierId String?
  courier   User?   @relation("courierOrder", fields: [courierId], references: [id])

  customerId String?
  customer   User?   @relation("customerOrder", fields: [customerId], references: [id])

  dueDate DateTime?

  shippingFee Float?
}

enum OrderStatus {
  PENDING
  INVOICED
  PICKED_UP
  PAID
  OVERDUE
  BILLED
  REJECTED
}

model Payment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  amount Float

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
